<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 刘毅的技术博客]]></title>
  <link href="http://lucifer1988.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://lucifer1988.github.io/"/>
  <updated>2014-02-26T15:02:54+08:00</updated>
  <id>http://lucifer1988.github.io/</id>
  <author>
    <name><![CDATA[刘毅]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[强力的日志分析工具-NSLogger]]></title>
    <link href="http://lucifer1988.github.io/blog/2014/02/25/qiang-li-de-ri-zhi-fen-xi-gong-ju-nslogger/"/>
    <updated>2014-02-25T17:00:29+08:00</updated>
    <id>http://lucifer1988.github.io/blog/2014/02/25/qiang-li-de-ri-zhi-fen-xi-gong-ju-nslogger</id>
    <content type="html"><![CDATA[<blockquote><p>NSLogger出现了，在Florent Pillet的打造下，一个开源强力的输出工具给了log这一古老的工作崭新的生命。标签输出，优先级查找，直接输出图像，多线程标记，时序控制，甚至是通过网络log到别人的终端或者是从别人的终端程序中记录log。在这里，只有想不到没有做不到，堪称是史上最为强大的logger。<br/>
<p align="right">&mdash;OneV&rsquo;s Den</p></p></blockquote>

<p>NSLogger是一款强力的日志记录和分析工具，其强大的功能，可以完全替代Xcode自带的Debugger，本文将介绍一些其主要特点和用法。git地址：<a href="https://github.com/fpillet/NSLogger">https://github.com/fpillet/NSLogger</a></p>

<!--more-->


<h2>安装</h2>

<p>NSLogger由两部分组成，一是需要加入工程中的组件代码，二是查看和管理日志的Mac客户端。组件代码可通过CocoaPods安装，也可通过手动添加（手动添加需要引入CFNetwok.framework和SystemConfiguration.framework）。Mac客户端NSLoggerViewer的源码包含在了组件当中，可以自己生成，也可以<a href="http://doruby.com/assets/NSLoggerViewer.zip">点击这里</a>下载生成好的客户端，NSLoggerViewer实际运行图：</p>

<p><img src="http://lucifer1988.github.io/images/NSLoggerViewer.png"></p>

<!--more-->


<h2>特点</h2>

<ul>
<li>标签输出</li>
<li>自定义优先级</li>
<li>直接输出图片</li>
<li>多线程标记</li>
<li>时序控制</li>
<li>远程记录</li>
</ul>


<!--more-->


<h2>配置</h2>

<p>首先要将LoggerClient.h头文件import进来，通过LoggerSetOptions()配置Logger的一些属性：</p>

<p>```
enum {
  kLoggerOption_LogToConsole               = 0x01,
  kLoggerOption_BufferLogsUntilConnection  = 0x02,
  kLoggerOption_BrowseBonjour              = 0x04,
  kLoggerOption_BrowseOnlyLocalDomain      = 0x08,
  kLoggerOption_UseSSL                     = 0x10,
  kLoggerOption_CaptureSystemConsole       = 0x20
};</p>

<p>void LoggerSetOptions(Logger *logger, uint32_t flags);
```
一般使用默认Logger，第一个参数传入NULL就行，至于第二个参数主要是一些功能开关选项，将需要开启的功能相或后作为第二个参数即可，详细参数说明<a href="https://github.com/fpillet/NSLogger/wiki/NSLogger-API">点击</a>，实例：</p>

<p>```</p>

<pre><code>    LoggerSetOptions(NULL,                  
                     kLoggerOption_BufferLogsUntilConnection |
                     kLoggerOption_UseSSL |
                     kLoggerOption_CaptureSystemConsole|
                     kLoggerOption_BrowseBonjour|
                     kLoggerOption_BrowseOnlyLocalDomain : 0));
</code></pre>

<p>```
NSLogger支持TCP和Bonjour两种方式连接终端设备，Bonjour连接一般不需要配置，如果要是使用TCP连接，要通过LoggerSetViewerHost()配置IP地址和端口（同时需配置NSLoggerViewer，在Preferences的Network中，勾选 “Listen for loggers on TCP port”打开监听）：</p>

<p><code>
void LoggerSetViewerHost(Logger *aLogger, CFStringRef host, UInt32 port);
</code>
同样，使用默认Logger，第一参数传NULL，实例：</p>

<p><code>
LoggerSetViewerHost(NULL, (__bridge CFStringRef)@"192.168.11.38", (UInt32)50000);
</code>
以上代码放到<code>- (void)applicationDidFinishLaunching:(UIApplication *)application</code>统一配置。</p>

<!--more-->


<h2>使用</h2>

<p>使用NSLogger基本方法和NSLog并无本质差别，只是开发者可以添加一些标签和级别参数，以供NSLoggerViewer端的日志过滤。</p>

<p><code>
void LogMessage(NSString *tag, int level, NSString *format, ...);
</code>
同时也支持添加文件名、方法名、行号、变量名等参数：</p>

<p><code>
void LogMessageF(const char *file, int line, const char *function, NSString *tag, int level, NSString *format, ...);
void LogMessage_va(NSString *tag, int level, NSString *format, va_list args);
</code>
NSLogger支持直接打印二进制数据：</p>

<p><code>
void LogData(NSString *tag, int level, NSData *data);
void LogDataF(const char *file, int line, const char *function, NSString *tag, int level, NSData *data);
</code>
NSLogger最大的优点，支持直接打印图片，而且可以指定打印图片的大小：</p>

<p><code>
void LogImageData(NSString *tag, int level, int width, int height, NSData *data);
void LogImageDataF(const char *file, int line, const char *function, NSString *tag, int level, int width, int height, NSData *data);
</code></p>

<!--more-->


<h2>Tips</h2>

<ul>
<li>直接使用默认打印函数过于繁琐，可结合需求自己定义宏来定义打印方法：</li>
</ul>


<p>```</p>

<h1>ifdef DEBUG</h1>

<h1>define LOG_NETWORK(level, &hellip;) LogMessageF(FILE,LINE,FUNCTION,&ldquo;network&rdquo;,level,<strong>VA_ARGS</strong>)</h1>

<h1>define LOG_GENERAL(level, &hellip;) LogMessageF(<strong>FILE</strong>,<strong>LINE</strong>,<strong>FUNCTION</strong>,“general”,level,VA_ARGS)</h1>

<h1>define LOG_GRAPHICS(level, &hellip;) LogMessageF(FILE,LINE,FUNCTION,@&ldquo;graphics&rdquo;,level,VA_ARGS)</h1>

<h1>define LOG_TRACE(&hellip;) LogMessageF( <strong>FILE</strong>,<strong>LINE</strong>,<strong>FUNCTION</strong>, NULL, 0, <strong>VA_ARGS</strong>)</h1>

<h1>else</h1>

<h1>define LOG_NETWORK(&hellip;) do{}while(0)</h1>

<h1>define LOG_GENERAL(&hellip;) do{}while(0)</h1>

<h1>define LOG_GRAPHICS(&hellip;) do{}while(0)</h1>

<h1>define LOG_TRACE(&hellip;) do{}while(0)</h1>

<p><code>
* 如果程序启动后，没有数据发送到NSLoggerViewer，可以先clean一下。
* 通过NSLoggerViewer当中Tools功能下</code>Add Mark<code>(**Cmd-M**)可以在日志列表底部快速添加一个时间戳标记，而使用</code>Add Mark With Title```(<strong>shift-Cmd-M</strong>)可以添加自定义标题的标记，通过这些标记将日志按照需要进行分块。<br/>
<img src="http://lucifer1988.github.io/images/NSLoggerViewer_Marker.png"></p>

<h2>总结</h2>

<p>本文介绍了NSLogger的一些基本用法和技巧，以后还会介绍一些其他的调试工具，不过个人感觉工具再好，不能真正结合自己的项目用起来，也没有太大意义，所以还是在平时能多去试试这些工具，这样才能利用到它们为我们真正做一些事情。</p>
]]></content>
  </entry>
  
</feed>
